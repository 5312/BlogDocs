import{_ as e,p as n,q as r,a1 as t}from"./framework-2c66b6ab.js";const a={},s=t(`<h2 id="vue-angular-ract-的优缺点" tabindex="-1"><a class="header-anchor" href="#vue-angular-ract-的优缺点" aria-hidden="true">#</a> vue,angular,ract 的优缺点</h2><p><strong>angular</strong></p><blockquote><p><strong>优点:</strong> 单项数据绑定，必须使用typeScript，使用angular-语言-服务，详细的文档，mvvm，特别针对大型项目创建的结构和架构<br><strong>缺点:</strong> 更难学，根据不同的基准，性能相对较慢</p></blockquote><p><strong>React</strong></p><blockquote><p><strong>优点：</strong> 设计简洁，容易学习，使用jsx来做模板，非常快，强力支持服务端渲染，，单向数据绑定<br><strong>缺点：</strong> css的最佳方式存在分歧，分为传统样式表（css modules）和 CSS-in-js();正在远离基于类的组件，jsx将模板与逻辑混合</p></blockquote><p><strong>Vue</strong></p><blockquote><p><strong>优点：</strong> 强化了html,这意味着Vue.js和Angular有许多相似的特性，详细的文档，适应性，可以快速的从其他框架切换到Vue。js大型拓展，文件非常小。<br><strong>缺点：</strong> 缺少资源。市场份额较小。</p></blockquote><h2 id="栈、队列的区别" tabindex="-1"><a class="header-anchor" href="#栈、队列的区别" aria-hidden="true">#</a> 栈、队列的区别</h2><blockquote><ol><li>队列是先进先出：就像一条路，有一个入口和一个出口，先进去的就可以先出去。 而栈就像一个箱子，后放的在上边，所以后进先出。</li><li>对插入和删除操作的”限定”不同</li><li>遍历数据速度不同。</li></ol></blockquote><h2 id="key的使用" tabindex="-1"><a class="header-anchor" href="#key的使用" aria-hidden="true">#</a> key的使用</h2><p>一般情况下，vue在渲染完成后，如果数据发生变化，只会重新渲染数据，不会重新渲染整个元素，但是有时候我们需要元素被重新渲染，此时就需要使用key关键字，使用v-bind绑定key关键字，可以实现在数据发生变化时候重新渲染整个元素。注：同一父级元素下所有子元素如果都要在数据变化后重新渲染元素，则需要被绑定的key</p><h2 id="前端项目中哪个印象比较深刻" tabindex="-1"><a class="header-anchor" href="#前端项目中哪个印象比较深刻" aria-hidden="true">#</a> 前端项⽬中哪个印象⽐较深刻</h2><h2 id="待完善" tabindex="-1"><a class="header-anchor" href="#待完善" aria-hidden="true">#</a> 待完善</h2><p><strong>跨域问题</strong></p><p>403错误就是浏览器禁止你跨域访问。为了解决这个问题，我在网上查了很多资料，而且得到了很多解决方案，主要的解决方案可以归为三种，分别为jsonp，nginx和cors。</p><h2 id="同源策略" tabindex="-1"><a class="header-anchor" href="#同源策略" aria-hidden="true">#</a> 同源策略</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>首先我们要了解什么是同源策略，来看看百度百科的解释：
同源策略，它是由Netscape提出的一个著名的安全策略。
现在所有支持JavaScript 的浏览器都会使用这个策略。所谓同源是指，域名，协议，端口相同。
当一个浏览器的两个tab页中分别打开百度和谷歌的页面
当一个百度浏览器执行一个脚本的时候会检查这个脚本是属于哪个页面的
即检查是否同源，只有和百度同源的脚本才会被执行。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Jsonp</strong></p><p>最早的解决方案，利用script标签可以跨域的原理实现。</p><blockquote><p>通过动态创建script标签，其scr指向非同源的url，并传递一个callback参数给服务端，服务器返回一个以callback参数作为函数名的函数的调用和一系列参数，页面接收到响应后执行回调并对数据进行处理。 创建一个回调函数，然后在远程服务上调用这个函数并且将JSON 数据形式作为参数传递，完成回调。</p></blockquote><p><code>&lt;script src=&quot;http://zeng.com:8002/pay?callback\${functionName}&quot;&gt;&lt;/script&gt;</code></p><p><em><strong>限制：</strong></em></p><p>需要服务的支持</p><p>只能发起GET请求</p><br><br><p><strong>nginx反向代理</strong></p><p><em><strong>思路是：</strong></em> 利用nginx把跨域反向代理为不跨域，支持各种请求方式<br><em><strong>缺点：</strong></em> 需要在nginx进行额外配置，语义不清晰</p><br><p><strong>CORS</strong></p><p>规范化的跨域请求解决方案，安全可靠。</p><p><em><strong>优势：</strong></em> 在服务端进行控制是否允许跨域，可自定义规则 支持各种请求方式</p><p><em><strong>缺点：</strong></em> 会产生额外的请求</p>`,33),o=[s];function i(c,l){return n(),r("div",null,o)}const p=e(a,[["render",i],["__file","you.html.vue"]]);export{p as default};
