import{_ as n,p as s,q as a,a1 as e}from"./framework-2c66b6ab.js";const p={},t=e(`<h1 id="正则验证" tabindex="-1"><a class="header-anchor" href="#正则验证" aria-hidden="true">#</a> 正则验证</h1><h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h2><ol><li>不是一个字符串，而是一套字符串的匹配规则。主要用于对字符串进行格式的限制或者从字符串中的根据某些规则过滤字符；</li><li>双斜杠 ‘ // ’ 表示正则表达式。表达式的规则由普通字符以及正则的元字符组成。</li><li>正则匹配规则： 字符串中一位一位的从左向右进行规则匹配。</li></ol><h2 id="正则方法" tabindex="-1"><a class="header-anchor" href="#正则方法" aria-hidden="true">#</a> 正则方法</h2><p>test(),只能由正则表达式调用，参数是字符串，如果符合正则式定的规则那么返回true,否则返回false.</p><h2 id="字符串方法" tabindex="-1"><a class="header-anchor" href="#字符串方法" aria-hidden="true">#</a> 字符串方法</h2><ol><li>match()，只能由字符串调用，参数是正则表达式。如果在字符串中找到了符合正则规则的字符串或者字符，那么将符合规则的内容装进数组返回。</li><li>replace(reg,str)</li></ol><h2 id="元字符" tabindex="-1"><a class="header-anchor" href="#元字符" aria-hidden="true">#</a> 元字符</h2><p>正则表达式规定了一些字符具有特殊意义，所有元字符在正则规则中都必须要进行转义&#39;&#39; ;</p><p><em><strong>预定义元字符</strong></em></p><p><code> \\d</code> ：表示所有的数字 等价于[0-9]</p><p><code>\\D</code> :表示除了数字以外的所有字符 等价于[^0-9]</p><p><code>\\w</code> ：表示所有的数字和字母_ 等价于[0-9a-zA-Z]</p><p><code>\\W</code> : 表示除了数字和字母_以外的字符 等价于[0-9a-zA-Z]</p><p><code>\\s </code>: 表示所有的空格字符</p><p><code>\\S </code>： 表示除了空格外的所有字符</p><p><code>match()</code><code>replace(reg,str)</code></p><blockquote><p>一个和尚有水吃：两个和尚抬水吃，三个和尚没水吃。 和尚 - 水 过滤</p></blockquote><p><code>var str = &#39;一个和尚有水吃,两个和尚抬水吃，三个和尚没水吃&#39;</code> ;</p><p><code>var reg = /[和尚]|水/g</code> ;</p><p><code>var arr = str.replace(reg,&#39;*&#39;)</code></p><p><code>console.log(arr)</code></p><p><em><strong><code>.</code></strong></em> 表示匹配除了换行符制表符以外的所有字符。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str  <span class="token operator">=</span> <span class="token string">&#39;abc123,@&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span> <span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong><code>^</code></strong></em> 表示以此符号后面的字符作为开头。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;abc123&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^01</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong><code>$</code></strong></em> 表示以此符号前面的字符作为结尾。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">2$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong><code>\\</code></strong></em>* 表示此符号前面的字符出现的次数是[0,正无穷)</p><p><code>var reg = /1*/;</code></p><p><em><strong><code>+</code></strong></em> 表示此符号前面的字符连续出现的次数是[1,正无穷)；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">1</span><span class="token operator">+</span><span class="token operator">/</span>；
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;0123&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong><code>?</code></strong></em> 表示此符号前面的字符连续出现的次数是[0,1];</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">1?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>() </code> 表示将（）内的字符作为一个整体进行匹配</p><p><code>[]</code> 表示符号内的字符任意一个或多个符合规则即可</p><p><em><strong><code>^</code></strong></em> 当 ^ 出现在[] 里面，就不再表示以它后面的字符作为开头，表示除了^ 后面的字符以外的字符</p><p><em><strong><code>-</code></strong></em> 当 - 出现在 [] 里面，表示一个连续区间。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span> <span class="token number">0</span><span class="token operator">-</span><span class="token number">9</span> <span class="token punctuation">]</span> 等价于 <span class="token punctuation">[</span><span class="token number">0123456789</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span>  <span class="token operator">&gt;</span> <span class="token punctuation">[</span>abcdefghijklmnopqrstuvwxyz<span class="token punctuation">]</span>
<span class="token punctuation">[</span>a<span class="token operator">-</span>zA<span class="token operator">-</span><span class="token constant">Z</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong><code>{}</code></strong></em> 表示符号前字符连续出现的次数</p><p><code>/a{5}/</code> 表示‘a’必须连续出现5 次，多一次不行少一次也不行</p><p><code>/a{0,1}/</code> 表示‘a’ 要么出现1次要么不出现，功能上等价于 <em><strong>？</strong></em></p><p><code>/a{0,}/</code> 等价于 <em><strong>*</strong></em></p><p><code>/a{1, }/</code> 功能等价于 +</p><p><code>/a{5,10}/</code> 表示 &#39;a&#39; 最少连续出现5 次 ，最多连续出现10次 ;</p><p><em><strong>|</strong></em> 不能出现在[] 内，表示或者的意思</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;abc123&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(a|1)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常见的表单验证" tabindex="-1"><a class="header-anchor" href="#常见的表单验证" aria-hidden="true">#</a> 常见的表单验证</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">var</span> ins <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ins<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> val <span class="token operator">=</span> ins<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

        <span class="token comment">// 手机号码的验证</span>
        <span class="token comment">// 1.11位纯数字</span>
        <span class="token comment">// 2.必须以1开头</span>
        <span class="token comment">// 3.第二位数字不包含012</span>
        <span class="token comment">// 4.其余位置无要求</span>
        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1[3-9][0-9]{9}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

        <span class="token comment">// 电子邮箱格式的验证</span>
        <span class="token comment">// 1.6~18个字符，可使用字母、数字、下划线</span>
        <span class="token comment">// 2.后需要出现@</span>
        <span class="token comment">// 3.字母或数字</span>
        <span class="token comment">// 4.字母或数字后出现.</span>
        <span class="token comment">// 5.字母若干   -&gt; .com</span>
        <span class="token comment">// 6.可能出现.</span>
        <span class="token comment">// 7.字母若干   -&gt; .com.cn</span>
        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\w{6,18}@[0-9a-z]{2,}\\.[a-z]+(\\.[a-z]+)?$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span>

        <span class="token comment">// ip地址格式验证：192.168.0.2</span>
        <span class="token comment">// 1.0-255之间的数</span>
        <span class="token comment">// 2.英文.</span>
        <span class="token comment">// 3.0-255之间的数</span>
        <span class="token comment">// 4.英文.</span>
        <span class="token comment">// 5.0-255之间的数</span>
        <span class="token comment">// 6.英文.</span>
        <span class="token comment">// 7.0-255之间的数</span>

        <span class="token comment">// 1位数  0-9</span>
        <span class="token comment">// 2位数  10-99</span>
        <span class="token comment">// 3位数  100-199 &amp; 200-255</span>

        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

        <span class="token comment">// var reg = /^(\\d{1,3}\\.){3}\\d{1,3}$/;</span>
        
        <span class="token comment">// http://www.baidu.com/</span>

        <span class="token comment">// 网址的格式校验</span>
        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^https?:\\/\\/www\\.[0-9a-z]+\\.[a-z]{2,6}\\/</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span>

        <span class="token comment">// 中文字符的匹配</span>
        <span class="token comment">// [\\u4e00-\\u9fa5];</span>
        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\u4e00-\\u9fa5]+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

        res<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">var</span> inps <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//整数</span>
    inps<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> num <span class="token operator">=</span> inps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token function">Int</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// p.innerHTML = real(num)</span>
        <span class="token comment">// p.innerHTML = negative(num);</span>
        <span class="token comment">// p.innerHTML = number(num);</span>
        <span class="token comment">// p.innerHTML = nNumber(num)</span>
        <span class="token comment">// p.innerHTML =nNumbers(num);</span>
        <span class="token comment">// p.innerHTML =mNumbers(num);</span>
        <span class="token comment">// p.innerHTML =zero(num);</span>
        <span class="token comment">// p.innerHTML =letterNumStr(num);</span>
        <span class="token comment">// p.innerHTML =letterStr26(num)</span>
        <span class="token comment">// p.innerHTML =letterStrA(num)</span>
        <span class="token comment">// p.innerHTML =letterStra(num)</span>
         <span class="token comment">// p.innerHTML = mouth(num);</span>
          <span class="token comment">// p.innerHTML =day(num);</span>
           <span class="token comment">// p.innerHTML = date(num);</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//整数小数</span>
    <span class="token keyword">function</span> <span class="token function">Int</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> patten <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^-?[1-9][0-9]*$</span><span class="token regex-delimiter">/</span></span>
        <span class="token keyword">var</span> patten2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^-?[0-9]+\\.{1}[0-9]{0,}$</span><span class="token regex-delimiter">/</span></span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>patten<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;是整数&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>patten2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;是小数&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            p<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;不是整数&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//非零的正整数</span>
    <span class="token keyword">function</span> <span class="token function">real</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// var patten = /^[1-9]+$/</span>
        <span class="token keyword">var</span> patten <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[1-9][0-9]*$</span><span class="token regex-delimiter">/</span></span>
        <span class="token keyword">return</span> patten<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//非零的负整数</span>
    <span class="token keyword">function</span> <span class="token function">negative</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// var patten = /^-[1-9]+$/</span>
        <span class="token keyword">var</span> patten <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^-[1-9][0-9]*$</span><span class="token regex-delimiter">/</span></span>
        <span class="token keyword">return</span> patten<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//只能输入数字</span>
    <span class="token keyword">function</span> <span class="token function">number</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> patten <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> patten<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//只能输入n位数字</span>
    <span class="token keyword">function</span> <span class="token function">nNumber</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> patten <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]{n}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> patten<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//只能输入至少n位数字</span>
    <span class="token keyword">function</span> <span class="token function">nNumbers</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> patten <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]{n,}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> patten<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//只能输入至少m-n位数字</span>
    <span class="token keyword">function</span> <span class="token function">mNumbers</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> patten <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]{m,n}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> patten<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//只能输入零和非零开头的数字</span>
    <span class="token keyword">function</span> <span class="token function">zero</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> patten <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(0|[1-9][0-9]*)$</span><span class="token regex-delimiter">/</span></span>
        <span class="token keyword">return</span> patten<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//字母验证</span>
    <span class="token comment">//只能输入由数字和26个英文字母组成的字符串</span>
    <span class="token keyword">function</span> <span class="token function">letterNumStr</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> patten <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Za-z0-9]+$</span><span class="token regex-delimiter">/</span></span>
        <span class="token keyword">return</span> patten<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//只能输入由26个英文字母组成的字符串</span>
    <span class="token keyword">function</span> <span class="token function">letterStr26</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> patten <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z]+$</span><span class="token regex-delimiter">/</span></span>
        <span class="token keyword">return</span> patten<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//只能输入由26个大写英文字母组成的字符串</span>
    <span class="token keyword">function</span> <span class="token function">letterStrA</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> patten <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Z]+$</span><span class="token regex-delimiter">/</span></span>
        <span class="token keyword">return</span> patten<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//只能输入26个小写英文字母组成的字符串</span>
    <span class="token keyword">function</span> <span class="token function">letterStra</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> patten <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-z]+$</span><span class="token regex-delimiter">/</span></span>
        <span class="token keyword">return</span> patten<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//日期验证</span>
    <span class="token comment">//一年的12个月</span>
    <span class="token keyword">function</span> <span class="token function">mouth</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> patten <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(0[1-9]$|1[0-2]$)</span><span class="token regex-delimiter">/</span></span>
        <span class="token keyword">return</span> patten<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//31天</span>
    <span class="token keyword">function</span> <span class="token function">day</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> patten <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">0[1-9]{1}|1[0-9]{1}|2[0-9]{1}|3[0-1]{1}</span><span class="token regex-delimiter">/</span></span>
        <span class="token keyword">return</span> patten<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//日期</span>
    <span class="token keyword">function</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> patten <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d{4}-(0[1-9]$|1[0-2]$)-(0[1-9]{1}|1[0-9]{1}|2[0-9]{1}|3[0-1]{1})</span><span class="token regex-delimiter">/</span></span>
        <span class="token keyword">return</span> patten<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="密码判断" tabindex="-1"><a class="header-anchor" href="#密码判断" aria-hidden="true">#</a> 密码判断</h2><p>5.写一个函数，参数为用户输入的密码，判断密码安全等级，并弹出结果。</p><p>安全等级判定规则：</p><ol><li>密码长度在6-16位之间</li><li>密码只能包含数字、字母、_</li><li>密码只包含数字或只包含字母，安全级别低（不区分大小写）</li><li>密码包含了数字和字母的，安全级别中（不区分大小写）</li><li>密码包含了数字、字母和下划线的，安全级别高（不区分大小写）</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">var</span> inps <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;inps&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> boxs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.box&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//输入时</span>
    inps<span class="token punctuation">.</span><span class="token function-variable function">oninput</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//输入的内容</span>
        <span class="token keyword">var</span> str <span class="token operator">=</span> inps<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token comment">//长度6-16位</span>
        <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^((\\d){6,16}|([a-zA-Z]){6,16})$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
        <span class="token comment">//正则匹</span>
        <span class="token keyword">var</span> bool <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//数字字母</span>
        <span class="token keyword">var</span> regA <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Za-z0-9]{6,16}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> boolA <span class="token operator">=</span> regA<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//</span>
        <span class="token keyword">var</span> re_g <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\w{6,16}$</span><span class="token regex-delimiter">/</span></span>   <span class="token punctuation">;</span>
        <span class="token keyword">var</span> boo_l <span class="token operator">=</span>re_g<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token comment">// console.log(bool)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boolA<span class="token punctuation">)</span>
        <span class="token comment">// console.log(boo_l)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span><span class="token punctuation">{</span>
            boxs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;block&#39;</span>

        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>boolA<span class="token punctuation">)</span><span class="token punctuation">{</span>
            boxs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;block&#39;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>boo_l<span class="token punctuation">)</span><span class="token punctuation">{</span>
            boxs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;block&#39;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            boxs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">;</span>
            boxs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">;</span>
            boxs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>手机号码:</strong></p><p><code>var reg = /^1[3-9][0-9]{9}$/</code></p><p><strong>电子邮箱格式验证:</strong></p><ol><li>字母或数字开头。字母允许大小写 - 4-18个字符</li><li>字母数字后需要出现@</li><li>字母或数字</li><li>字母或数字后出现。</li><li>字母若干</li></ol><p><code>var pattern = /^\\w+([\\-+.]\\w+)*@\\w+([\\-.]\\w+)*\\.\\w+([\\-.]\\w+)*$/</code></p><p><strong>网址的格式效验</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(http):\\/\\/w{3}\\.\\w+\\.[a-z]+$</span><span class="token regex-delimiter">/</span></span>
inps<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> mag <span class="token operator">=</span> inps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>

    h<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>mag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>中文字符的匹配:</strong></p><p><code>[\\u4e00-\\u9fa5];</code></p>`,64),o=[t];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","正则验证.html.vue"]]);export{r as default};
