import{_ as n,p as s,q as a,a1 as p}from"./framework-2c66b6ab.js";const t="/BlogDocs/images/js面向对象.png",o={},e=p('<h1 id="js面向对象" tabindex="-1"><a class="header-anchor" href="#js面向对象" aria-hidden="true">#</a> JS面向对象</h1><p><img src="'+t+`" alt="js面向对象"></p><h3 id="面向对象" tabindex="-1"><a class="header-anchor" href="#面向对象" aria-hidden="true">#</a> 面向对象</h3><p><em><strong>面向对象和面向过程都是一种编程思想</strong></em> <br></p><p><strong>面向过程:</strong> 代表c语言：面向过程在解决问题的时候，关注的实现问题的步骤，就是将每一步要做的事情写成函数，最后一次调用这些函数解决问题<br><strong>面向对象:</strong> 代表java语言等，而面向对象在解决问题时，关注的时解决问题的参与者本身，他们恩应该具备怎样的行为与特征，通过对象描述行为与特征，最后由这些参与者共同解决问题<br></p><p><strong>万物皆对象:</strong> 编码过程中还是现实生活种处处是对象<br><strong>面向对象的优势:</strong> 健壮性，拓展性，复用性<br><strong>面想对象的特点:</strong> 封装，继承，多态<br><strong>面向对象的基础:</strong> 抽象<br></p><p>之前接触过的对象<br><code>window document element</code><code>NUmber string Boolean Function Array Object Regexp Date</code><br></p><p><code>Math ,JSON</code> (内置的静态对象，不需要在去建造对象实例，直接拿来用)</p><p><strong>js代码执行机制：</strong> 包装对象，浏览器引擎会将非对象（使用了属性和方法，但本身类型不是object）的值拷贝，然后创建一个临时对象，由这个临时对象去使用属性和方法，将结果作为返回值，之后自动销毁临时对象</p><p><strong>代码优化问题：</strong> 主要针对的字符串String 如果你的字符串需要频繁订单调用属性和方法，那么在创建他时请使用new String（）的方式：如果字符串仅仅用于显示那么请使用字面量</p><p>js虽然也有对象的概念。但并不是一个真正的面向对象语言。因为js中没有类的概念<br><strong>类：</strong> 是对某些事物共同特征和行为抽象的结果<br><strong>对象：</strong> 是对类的具体实现<br><strong>抽象：</strong> 就是对某些事物共同特征和行为提炼的过程<br><strong>类和对象的区分：</strong> 如果唯一就是对象，如果能想到很对符合的内容，那么就是类<br></p><p>js中没有类，通过构造函数来代替类，用于创建对象<br> js数组就是特殊的对象（有序，key值是从0开始递增的正整数）<br></p><p><strong>js中如何创建对象</strong></p><ol><li><p>字面量创建、</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;小王&#39;</span><span class="token punctuation">;</span>
    obj<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>

    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>通过系统提供的Object构造函数创建</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;小王&#39;</span><span class="token punctuation">;</span>
    obj<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    obj<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>

    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>工厂模式</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sutdents</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>tel</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span>name<span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span>age<span class="token punctuation">,</span>
        <span class="token literal-property property">sex</span><span class="token operator">:</span>sex<span class="token punctuation">,</span>
        <span class="token function-variable function">say</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>通过自定义构造函数创建对象（自定义构造函数就想相当于类）<br><em><strong>构造函数本质上也是函数，但是通过首字母大写，来和普通函数加以区分</strong></em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token parameter">age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> height<span class="token punctuation">,</span> weight<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>eyes <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;哺乳类&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;好开心&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>通过系统关键字 new 来创建对象 <br></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">&#39;李富贵&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><em><strong>基础数据类型赋值：</strong></em> 拷贝赋值 <code>js var a = 2; var b =a ; b+=5; console.log(a);//2 </code></p><p><em><strong>引用数据类型赋值：</strong></em> 引用赋值 <code>js var a = [1, 2, 3]; var b = a; b.push(4); console.log(a) </code></p><p><em><strong>基础数据类型比较的值是否相等</strong></em><code>js var a = 2; var b = 2; console.log(a == b);//true; </code></p><p><em><strong>引用数据类型比较的是内存地址是否相等</strong></em><code>js var a = [1, 2, 3]; var b = [1, 2, 3]; console.log(a == b) //false; // console.log({} == {}) //false; </code></p><h2 id="原型" tabindex="-1"><a class="header-anchor" href="#原型" aria-hidden="true">#</a> 原型</h2><p><em><strong>每个构造函数都存在一个属性prototype(原型)，值是一个对象，所有通过构造函数创建的实例，都可以访问创建他的构造函数的原型上的属性和方法</strong></em></p><blockquote><p>存在于对象自身的属性称为对象的本地属性，本地属性只能对象自己使用其他对象无法使用<br> 我们一般将方法以及值固定不变的属性都写在构造函数的原型上<br> 对象自身并没有call方法，但依然可以调用call方法，这个call方法来自于创建对象的构造函数的原型。 直接存在于对象自身的属性称为对象的本地属性，本地属性只能对象自己使用，其他对象无法使用</p></blockquote><p><em><strong><em>proto</em> constructor prototype</strong></em> <br><strong>关于prototype原型：</strong></p><ol><li><p>每个构造函数都有属于自己的原型，原型上的方法和属性可以供构造函数创建的实例对象访问使用</p></li><li><p>当原型上的属性和构造函数中的属性命名冲突时，构造函数中的属性优先级更高。（就近原则）</p></li><li><p><code>isPrototypeOf()</code>方法用来判断当前原型是否是指定实例对象的构造函数的原型 返回布尔值 <code>console.log(Animal.prototype.isPrototypeOf(anm1));</code><br><code>console.log(Animal.prototype.isPrototypeOf(pla1));</code></p></li><li><p><code>hasOwnProperty()</code>方法用来判断对象的属性来自于自身的本地属性还是原型上的属性 返回布尔值 <code>console.log(anm1.hasOwnProperty(&#39;cell&#39;));</code><br><code>console.log(anm1.hasOwnProperty(&#39;type&#39;));</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">var</span> cirl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> cir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cirl</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token string-property property">&quot;width&quot;</span><span class="token operator">:</span> <span class="token function">rn</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token function">rn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;%&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token function">rn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;%&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">&quot;rgb(&quot;</span> <span class="token operator">+</span> <span class="token function">rn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;,&#39;</span> <span class="token operator">+</span> <span class="token function">rn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;,&#39;</span> <span class="token operator">+</span> <span class="token function">rn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//通过new 创建对象如果构造函数没有参数，那么小括号可以省略</span>
        cir<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">Cirl</span><span class="token punctuation">(</span><span class="token parameter">flang</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 属性只是对原型特征的描述，网页中显示圆形还需要标签将园的特征体现</span>
        flang <span class="token operator">=</span> flang <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> flang<span class="token punctuation">[</span><span class="token string">&#39;width&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> flang<span class="token punctuation">[</span><span class="token string">&#39;width&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">=</span> flang<span class="token punctuation">[</span><span class="token string">&#39;top&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> flang<span class="token punctuation">[</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> flang<span class="token punctuation">[</span><span class="token string">&#39;background&#39;</span><span class="token punctuation">]</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> ball <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>ball<span class="token punctuation">)</span>
            ball<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">;</span>
            ball<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">;</span>
            ball<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>backgroundColor<span class="token punctuation">;</span>
            ball<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token punctuation">;</span>
            ball<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">rn</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h2><ol><li>根据规则或特征提炼准则的不同，类的范围有所不同，将多个类间的相同特征写给一个公共类，这个就称为父类。子类的实例对象可以访问父类中定义的属性和方法。称之为继承。js中的继承是单继承。一个子级只能有一个父类，并且子类不能再作为父类的父类</li><li>所有函数都存在两个方法 call()/apply()可以改变指定函数的this指向</li><li>两个方法的区别：第二参数（可选参数），对于call（）方法第二参数需要用’，’ 隔开，而apply()第二参数需要放入数组</li></ol><div class="custom-container warning"><p class="custom-container-title">注意</p><p>通过call()方法和apply()方法实现的继承称为构造函数继承，只能继承到父类构造函数中的属性和方法 无法继承到父类原型中的属性和方法。</p></div><p><em><strong>通过构建函数创建对象需要系统关键字new;</strong></em></p><ol><li>创建了一个空对象 object</li><li>将Anmal中的指向改变，变成了空的object</li><li>按顺序执行Anmal中的代码</li><li>return 返回了添加了属性和方法的object</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> an1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>an1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 所有函数都存在两个方法:call()/apply()可以改变指定函数中this的指向</span>
<span class="token comment">// 两个方法的共同点：第一个参数需要一个对象，表示将当前函数中的this指向改变为当前的对象</span>
<span class="token comment">// 区别：第二参数可选参数，对于call()方法第二参数需要列举用&#39;,&#39;隔开，而apply 方法第二参数需要一个数组</span>
<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> o<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span><span class="token string">&#39;001&#39;</span>
<span class="token punctuation">}</span>

<span class="token function">a</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指向我们创建的o 而不是window</span>
<span class="token function">a</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="构造函数继承" tabindex="-1"><a class="header-anchor" href="#构造函数继承" aria-hidden="true">#</a> 构造函数继承</h3><blockquote><p>通过call()方法和apply（）方法实现的继承称为构造函数继承，只能继承到父类构造函数中的函数属性和方法。无法继承父类函数原型中的属性和方法;</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> eat<span class="token punctuation">,</span> play</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>eat <span class="token operator">=</span> eat<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>play <span class="token operator">=</span> play<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>voice <span class="token operator">=</span> voice<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>cell <span class="token operator">=</span> <span class="token string">&#39;没有细胞壁&#39;</span>
    <span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">call</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>voice<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Animal</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> Dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;犬科&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;骨头&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;木棍&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">function</span> <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Animal</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> eat<span class="token punctuation">,</span> play<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> Cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">&#39;猫科&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;鱼&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;球&#39;</span><span class="token punctuation">)</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Cat<span class="token punctuation">)</span>


    <span class="token keyword">function</span> <span class="token function">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">Animal</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> Bird <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Brid</span><span class="token punctuation">(</span><span class="token string">&#39;鸟科&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;虫&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;石头&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原型上的继承" tabindex="-1"><a class="header-anchor" href="#原型上的继承" aria-hidden="true">#</a> 原型上的继承</h3><p><em><strong>先创建两个类</strong></em></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 父类构造函数的属性</span>
<span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;动物&#39;</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
<span class="token comment">// 父类原型上的属性</span>
<span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>cell <span class="token operator">=</span> <span class="token string">&#39;没有细胞壁&#39;</span><span class="token punctuation">;</span>
<span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">call</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>voice<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">// 狗类</span>
<span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token parameter">voice</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 第一参数this 第二参数为type eat play 用，隔开</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>voice <span class="token operator">=</span> voice<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>引用继承:</strong></em> 可以实现对父类原型上属性和方法的访问，但是存在问题，因为直接赋值，那么从此Animal的原型就是Dog的原型，Dog的原型也就是Animal的原型，对Dog原型的操作会直接影响父类Animal的原型。这是不合理的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
    <span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>favorite<span class="token operator">=</span><span class="token string">&#39;骨头&#39;</span>
    <span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;汪汪&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dog</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>favorite<span class="token punctuation">)</span>

    <span class="token keyword">var</span> an1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//骨头</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>an1<span class="token punctuation">.</span>favorite<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>拷贝继承:</strong></em> 可以实现父类原型的属性和方法继承，但是也存在一些问题，虽然解决了引用继承存在的问题，但是拷贝继承是一次性的继承，如果父类的原型又做了拓展，子类想要继承必须再次执行拷贝继承，那么会存在大量冗余代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>      <span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sleep</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;动物都需要睡觉，才能更好成长&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">in</span> <span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 原型上 有了 favorite</span>
        <span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>favorite<span class="token operator">=</span><span class="token string">&#39;骨头&#39;</span> <span class="token punctuation">;</span>

        <span class="token keyword">var</span> dog<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;汪汪&#39;</span><span class="token punctuation">)</span>
        <span class="token function">dog</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span>favorite<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dog<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token keyword">var</span> an1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//骨头</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>an1<span class="token punctuation">.</span>favorite<span class="token punctuation">)</span>
        an1<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>真引用继承：</strong></em> 既可以实现原型上的继承，也可以实现构造函数上的继承，并且继承完成后，对子类的操作也不会影响到父类，对父类的操作，子类可以动态获取</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 实现思路：将子类原型，指向父类的实例对象</span>
<span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>like <span class="token operator">=</span> <span class="token string">&#39;sleep&#39;</span>
<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//constructor 是Animal</span>
<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Dog<span class="token punctuation">;</span> <span class="token comment">//把值赋给 Dog  constructor是Dog</span>
<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>love <span class="token operator">=</span> <span class="token string">&#39;肉&#39;</span> <span class="token comment">//添加新的属性</span>

<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&#39;汪汪&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// dog.call();</span>
<span class="token comment">// console.log(dog.type);</span>
<span class="token comment">// console.log(dog.like);</span>

<span class="token comment">// // animal</span>
<span class="token comment">// var an1 = new Animal();</span>
<span class="token comment">// console.log(an1.love)</span>


<span class="token comment">// 所有的对象都存在一个属性 constructor 指向创建当前对象的构造函数</span>
<span class="token comment">// console.log(dog.constructor)</span>
<span class="token comment">// dog.constructor.prototype.test=&#39;测试&#39;</span>
<span class="token comment">// console.log(Animal.prototype.test);</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原型链" tabindex="-1"><a class="header-anchor" href="#原型链" aria-hidden="true">#</a> 原型链</h3><p><strong>在继承过程中，子类，父类，父类等等之间原型会产生关联，形成链状结构称之为原型链</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Teed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Dog<span class="token punctuation">;</span>

<span class="token class-name">Teed</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Teed</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Teed<span class="token punctuation">;</span>

<span class="token keyword">var</span> teed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 所有对象都存在一个属性 _proto_,指向创建当前的构造函数的原型</span>
<span class="token keyword">var</span> res1 <span class="token operator">=</span> teed<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Teed</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
<span class="token keyword">var</span> res2 <span class="token operator">=</span> <span class="token class-name">Teed</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
<span class="token keyword">var</span> res3 <span class="token operator">=</span> <span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
<span class="token keyword">var</span> res4 <span class="token operator">=</span> <span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
<span class="token keyword">var</span> res5 <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">,</span> res2<span class="token punctuation">,</span> res3<span class="token punctuation">,</span> res4<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="拓展方法" tabindex="-1"><a class="header-anchor" href="#拓展方法" aria-hidden="true">#</a> 拓展方法</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token keyword">function</span> <span class="token function">addlog</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;te&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        text<span class="token punctuation">.</span>value <span class="token operator">=</span> text<span class="token punctuation">.</span>value <span class="token operator">+</span> val <span class="token operator">+</span> <span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
    <span class="token comment">// 首字母大写</span>

    <span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">Capitalized</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> t <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b(\\w)|\\s(\\w)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;i am a good body&#39;</span><span class="token punctuation">;</span>

    <span class="token function">addlog</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">Capitalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// 删除首尾空格</span>
    <span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">Deletrail</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(^\\s*)|(\\s*$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> strs <span class="token operator">=</span> <span class="token string">&#39;    i am a good body    &#39;</span>
    <span class="token function">addlog</span><span class="token punctuation">(</span>strs<span class="token punctuation">.</span><span class="token function">Deletrail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// 升序排序</span>
    <span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">Ascend</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sortNum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">sortNum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">-</span> b
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> ascrend <span class="token operator">=</span> <span class="token string">&#39;3,2,5,1,89,99,23&#39;</span>
    <span class="token function">addlog</span><span class="token punctuation">(</span>ascrend<span class="token punctuation">.</span><span class="token function">Ascend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// 分数类：分子，分母</span>
    <span class="token comment">//打印分数</span>
    <span class="token keyword">function</span> <span class="token function">Fraction</span><span class="token punctuation">(</span><span class="token parameter">numerator<span class="token punctuation">,</span> denominator</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//分数类</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> numerator<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">=</span> denominator<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Fraction</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">yueFen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 最小数</span>
        <span class="token keyword">var</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 最大公约数</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> min<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">/=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token operator">/=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>d
    <span class="token punctuation">}</span>

    <span class="token keyword">var</span> yuefen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fraction</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">addlog</span><span class="token punctuation">(</span>yuefen<span class="token punctuation">.</span><span class="token function">yueFen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// 乘</span>
    <span class="token class-name">Fraction</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">Fan_mul</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> fenzi <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token comment">//</span>
        <span class="token keyword">var</span> fenmu <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>d <span class="token comment">//</span>
        <span class="token keyword">var</span> numFenzi <span class="token operator">=</span> num<span class="token punctuation">.</span>n<span class="token punctuation">;</span>
        <span class="token keyword">var</span> numFenmu <span class="token operator">=</span> num<span class="token punctuation">.</span>d<span class="token punctuation">;</span>
        <span class="token keyword">var</span> x <span class="token operator">=</span> fenzi <span class="token operator">*</span> numFenmu<span class="token punctuation">;</span>
        <span class="token keyword">var</span> y <span class="token operator">=</span> fenmu <span class="token operator">*</span> numFenzi<span class="token punctuation">;</span>
        <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> x <span class="token operator">/</span> t <span class="token operator">+</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">+</span> y <span class="token operator">/</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">var</span> mul1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fraction</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> mul2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fraction</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mul1<span class="token punctuation">.</span><span class="token function">Fan_mul</span><span class="token punctuation">(</span>mul2<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">function</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//最大公约数,用于化简</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>
            a <span class="token operator">=</span> b<span class="token punctuation">;</span>
            b <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">%</span> b <span class="token operator">?</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a <span class="token operator">%</span> b<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">:</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">fra_add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//加法</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> b<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> a<span class="token punctuation">;</span>
        <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">lcm</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>d<span class="token punctuation">,</span> b<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> y <span class="token operator">=</span> a<span class="token punctuation">.</span>n <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">/</span> a<span class="token punctuation">.</span>d<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">.</span>n <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">/</span> b<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Fraction</span><span class="token punctuation">(</span>y <span class="token operator">/</span> g<span class="token punctuation">,</span> x <span class="token operator">/</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">fra_mul</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//乘法</span>
        <span class="token keyword">var</span> x <span class="token operator">=</span> a<span class="token punctuation">.</span>n <span class="token operator">*</span> b<span class="token punctuation">.</span>n<span class="token punctuation">;</span>
        <span class="token keyword">var</span> y <span class="token operator">=</span> a<span class="token punctuation">.</span>d <span class="token operator">*</span> b<span class="token punctuation">.</span>d<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Fraction</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Fraction</span><span class="token punctuation">(</span>x <span class="token operator">/</span> g<span class="token punctuation">,</span> y <span class="token operator">/</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">lcm</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//最小公倍数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span>
            a <span class="token operator">=</span> b<span class="token punctuation">;</span>
            b <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> a <span class="token operator">*</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46),c=[e];function l(i,u){return s(),a("div",null,c)}const r=n(o,[["render",l],["__file","原型.html.vue"]]);export{r as default};
